<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cust">
	<select id="custListTotalRow" resultType="int">
		SELECT count(*)
		FROM  tb_cust a left outer join tb_cust_phone p on a.cust_no = p.cust_no and p.primary_yn='Y'
		WHERE a.del_yn = 'N'
			<if test="cust_no !=null and cust_no !=''">
				and(a.cust_no like concat('%', #{cust_no}, '%') )
			</if> 
	   		<if test="cust_name !=null and cust_name !=''">
				and(a.cust_name like concat('%', #{cust_name}, '%') )
			</if>
			<if test="chart_no !=null and chart_no !=''">
				and(a.chart_no like concat('%', #{chart_no}, '%') )
			</if> 
	   		<if test="visit_cd !=null and visit_cd !=''">
				and(a.visit_cd like concat('%', #{visit_cd}, '%') )
			</if> 
	   		<if test="visit_dtl_cd !=null and visit_dtl_cd !=''">
				and(a.visit_dtl_cd like concat('%', #{visit_dtl_cd}, '%') )
			</if> 
	   		<if test="rec_per !=null and rec_per !=''">
				and(a.rec_per like concat('%', #{rec_per}, '%') )
			</if> 
			<if test="phone_no !=null and phone_no !=''">
				and( (concat(p.phone_area_no, p.phone_no) like concat('%', #{phone_no}, '%') ))
			</if>
	   		<if test="user_id != null and user_id != ''">
				AND (emp_no like (select user_no from tb_user where user_id = #{user_id}))
			</if>
	</select>
	
	<select id="custPhoneTotalRow" resultType="int">
		SELECT count(*) 
		FROM tb_cust_phone
		WHERE primary_yn = 'Y'
			
	</select>

	<select id="custList" resultType="com.core.plus.contact.cust.vo.CustVO" parameterType="java.util.Map">
		SELECT P.*
		FROM (
			select
		         a.cust_no
		         , date_format(a.update_date, '%Y-%m-%d %H:%i') as update_date
		         ,a.cust_name
		         ,case when(a.chart_no) is null then '' else (a.chart_no) end as chart_no
		         ,a.cust_id
		         ,a.emp_no
		         ,case when  (select user_nm from tb_user where user_no = a.emp_no)  is null then ''
		         	else (select user_nm from tb_user where user_no = a.emp_no) end as emp_name
		         ,a.cust_type
		         ,a.cust_rank
		         ,a.visit_cd
		         ,a.visit_dtl_cd
		         ,a.visit_cn
		         ,a.email_id
		         ,a.email_dm
		         ,case when(rec_per) is null then '' else (rec_per) end as rec_per
		         ,case when (select phone_area_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select phone_area_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) end as phone_area_no
		         ,case when (select concat(substr(phone_no,1,4),'-',substr(phone_no,5,8)) from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select concat(substr(phone_no,1,4),'-',substr(phone_no,5,8)) from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) end as phone_no
		         ,(select zip_no from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) as zip_no
		         ,case when (select main_address from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select main_address from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) end as main_address
	      	from tb_cust a left outer join tb_cust_phone p on a.cust_no = p.cust_no and p.primary_yn ='Y'
	     	where a.del_yn = 'N'
	   		<if test="cust_no !=null and cust_no !=''">
				and(a.cust_no like concat('%', #{cust_no}, '%') )
			</if> 
	   		<if test="cust_name !=null and cust_name !=''">
				and(a.cust_name like concat('%', #{cust_name}, '%') )
			</if> 
			<if test="chart_no !=null and chart_no !=''">
				and(a.chart_no like concat('%', #{chart_no}, '%') )
			</if> 
	   		<if test="visit_cd !=null and visit_cd !=''">
				and(a.visit_cd like concat('%', #{visit_cd}, '%') )
			</if> 
	   		<if test="visit_dtl_cd !=null and visit_dtl_cd !=''">
				and(a.visit_dtl_cd like concat('%', #{visit_dtl_cd}, '%') )
			</if> 
	   		<if test="rec_per !=null and rec_per !=''">
				and(a.rec_per like concat('%', #{rec_per}, '%') )
			</if> 
	   		<if test="phone_no !=null and phone_no !=''">
				and (concat(p.phone_area_no, p.phone_no) like concat('%', #{phone_no}, '%') )
			</if>
			<if test="user_id != null and user_id != ''">
				AND (emp_no like (select user_no from tb_user where user_id = #{user_id}))
			</if>
		order by a.update_date desc
		) P
		LIMIT #{page.limitStartNum}, #{page.pageSize}
	</select>
	
	<!-- 엑셀 출력 -->
	<select id="custExcelExport" parameterType="string" resultType="map">
		SELECT X.*
		FROM ( 
			select
		         a.cust_no
		            , date_format(a.create_date, '%Y-%m-%d %H:%i') as create_date
		         ,a.cust_name
		         ,case when(a.chart_no) is null then '' else (a.chart_no) end as chart_no
		         ,a.cust_id
		         ,a.emp_no
		         ,(select user_nm from tb_user where user_no = a.emp_no) as emp_name
		         ,(select code_name from tb_code code where code_no = '1001' and code.code = a.visit_cd ) as visit_cd
		         ,(select code_name from tb_code code where code_no = '1002' and code.code = a.visit_cd ) as visit_dtl_cd
		         ,a.visit_cn
		         ,a.email_id
		         ,a.email_dm
		         ,case when(rec_per) is null then '' else (rec_per) end as rec_per
		         ,case when (select phone_area_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select phone_area_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) end as phone_area_no
		         ,case when (select phone_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select phone_no from tb_cust_phone where primary_yn = 'Y' and cust_no = a.cust_no) end as phone_no
		         ,(select zip_no from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) as zip_no
		         ,case when (select main_address from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) is null then ''
		          else (select main_address from tb_cust_addr where primary_yn = 'Y' and cust_no = a.cust_no) end as main_address
		      	from tb_cust a
		     	where a.del_yn = 'N'
		   		<if test="cust_no !=null and cust_no !=''">
					and(a.cust_no like concat('%', #{cust_no}, '%') )
				</if> 
		   		<if test="cust_name !=null and cust_name !=''">
					and(a.cust_name like concat('%', #{cust_name}, '%') )
				</if>
				<if test="chart_no !=null and chart_no !=''">
					and(a.chart_no like concat('%', #{chart_no}, '%') )
				</if>
		   		<if test="visit_cd !=null and visit_cd !=''">
					and(a.visit_cd like concat('%', #{visit_cd}, '%') )
				</if> 
		   		<if test="visit_dtl_cd !=null and visit_dtl_cd !=''">
					and(a.visit_dtl_cd like concat('%', #{visit_dtl_cd}, '%') )
				</if> 
		   		<if test="rec_per !=null and rec_per !=''">
					and(a.rec_per like concat('%', #{rec_per}, '%') )
				</if> 
		   		<if test="phone_no !=null and phone_no !=''">
					and(c.phone_no like concat('%', #{phone_no}, '%') )
				</if>
				<if test="user_id != null and user_id != ''">
					AND (emp_no like (select user_no from tb_user where user_id = #{user_id}))
				</if>
			order by a.update_date desc
		)X
	</select>
	
	<select id="custDetailList" resultType="com.core.plus.contact.cust.vo.CustVO" parameterType="String">
		select
			a.cust_no
			,a.create_date
			,a.cust_name
			,a.resident_no
			,a.chart_no
			,a.cust_id
			,a.emp_no
			,(select user_nm from tb_user where user_no = a.emp_no) as emp_name
			,a.cust_rank
			,a.cust_type
			,a.email_id
			,a.email_dm
			,a.visit_cd
			,a.visit_dtl_cd
			,a.visit_cn
			,a.rec_per
			,a.remark_cn
		from tb_cust a
		where
			a.cust_no = #{cust_no}
	</select>
	
	<!-- 중복체크 -->
	<select id="custDuplicate" parameterType="com.core.plus.contact.cust.vo.CustVO" resultType="int">
		SELECT count(*)
		FROM 
			tb_cust
		WHERE
			cust_name = #{cust_name} AND resident_no = #{resident_no}
	</select>
	
	<insert id="custInsert" parameterType="com.core.plus.contact.cust.vo.CustVO">
		<selectKey keyProperty="cust_no" resultType="String" order="BEFORE">
			SELECT 
                  IF(SUBSTR(MAX(cust_no), 1, 10) = DATE_FORMAT(now(), '%Y%m%d%H')
                     , MAX(cust_no)+1
                     , concat(DATE_FORMAT(now(), '%Y%m%d%H'),'00001')) cust_no
                  FROM tb_cust USE INDEX(PRIMARY)
		</selectKey>
		insert into tb_cust (
							cust_no
							,cust_name
							,resident_no
							,chart_no
							,cust_id
							,emp_no
							,cust_type
							,cust_rank
							,visit_cd
							,visit_dtl_cd
							,visit_cn
							,email_id
							,email_dm
							,rec_per
							,remark_cn
		)
		values(
			#{cust_no}
           	,#{cust_name}
           	,#{resident_no}
           	,#{chart_no}
           	,#{cust_id}
           	,#{emp_no}
           	,#{cust_type}
           	,#{cust_rank}
           	,#{visit_cd}
           	,#{visit_dtl_cd}
           	,#{visit_cn}
           	,#{email_id}
           	,#{email_dm}
           	,#{rec_per}
           	,#{remark_cn}
		)
<!-- 		<selectKey keyProperty="cust_key" resultType="String" order="AFTER"> -->
<!-- 			SELECT  -->
<!--                   MAX(cust_no) -->
<!--             FROM tb_cust USE INDEX(PRIMARY) -->
<!-- 		</selectKey> -->
	</insert>
	
	<update id="custUpdate" parameterType="com.core.plus.contact.cust.vo.CustVO">
		update tb_cust
		set
			cust_name = #{cust_name}
			,chart_no = #{chart_no}
			,cust_id = #{cust_id}
			,emp_no  = #{emp_no}
			,cust_type = #{cust_type}
			,cust_rank = #{cust_rank}
			,visit_cd = #{visit_cd}
			,visit_dtl_cd = #{visit_dtl_cd}
			,visit_cn = #{visit_cn}
			,rec_per = #{rec_per}
			,email_id = #{email_id}
			,email_dm = #{email_dm}
			,remark_cn = #{remark_cn}
		where cust_no = #{cust_no}
	</update>
	
	<update id="custDelete" parameterType="com.core.plus.contact.cust.vo.CustVO">
		update tb_cust
		set
			del_yn = 'Y'
		where cust_no = #{cust_no}
	</update>
	
	<!-- import Test -->
	<insert id="custExcelInsert" parameterType="com.core.plus.contact.cust.vo.CustVO">
		<selectKey keyProperty="cust_no" resultType="String" order="BEFORE">
			SELECT 
                  IF(SUBSTR(MAX(cust_no), 1, 10) = DATE_FORMAT(now(), '%Y%m%d%H')
                     , MAX(cust_no)+1
                     , concat(DATE_FORMAT(now(), '%Y%m%d%H'),'00001')) cust_no
                  FROM tb_cust USE INDEX(PRIMARY)
		</selectKey>
		insert into tb_cust 
			(cust_no, cust_name, resident_no, chart_no, cust_id, emp_no, visit_cd, visit_dtl_cd, visit_cn, cust_rank, cust_type, rec_per, remark_cn, email_id, email_dm)
		values 
			(#{cust_no}, #{cust_name}, #{resident_no}, #{chart_no}, #{cust_id}, #{emp_no}, #{visit_cd}, 
			 #{visit_dtl_cd}, #{visit_cn}, #{cust_rank}, #{cust_type}, #{rec_per}, #{remark_cn}, #{email_id}, #{email_dm})
	</insert>
	
	<update id="custExcelUpdate" parameterType="com.core.plus.contact.cust.vo.CustVO">
		UPDATE tb_cust
		SET
			chart_no = #{chart_no}
			,cust_id = #{cust_id}
			,emp_no	= #{emp_no}
			,visit_cd = #{visit_cd}
			,visit_dtl_cd = #{visit_dtl_cd}
			,visit_cn = #{visit_cn}
			,rec_per = #{rec_per}
			,remark_cn = #{remark_cn}
			,email_id = #{email_id}
			,email_dm = #{email_dm}
		WHERE 
			cust_name = #{cust_name} AND resident_no = #{resident_no}
	</update>
	
	<!-- 청구/수금을 위한 쿼리 -->
	<!-- 전체 리스트 -->
	<select id="optyAmount" parameterType="java.util.Map" resultType="com.core.plus.contact.cust.vo.CustVO">
		SELECT A.oppty_no, A.oppty_name, A.total_price, ifnull(sum(payment_price), 0) as payment_price, (A.total_price - ifnull(sum(payment_price), 0)) as outstding_amount, ifnull(B.payment_flg, 'N') as payment_flg
		FROM (
			SELECT ot.oppty_no, o.oppty_name, sum((ot.qty * ot.list_price - ot.dc_price)) as total_price
			FROM tb_oppty o, tb_oppty_item ot
			WHERE o.oppty_no = ot.oppty_no
			AND o.cust_no = #{cust_no} AND o.oppty_status_cd = '003' AND o.oppty_stage_cd = '004'
			GROUP BY o.oppty_name
		) A left outer join tb_sales B on A.oppty_no = B.oppty_no
		GROUP BY A.oppty_no
	</select>
	
	<!-- 납부한 상품에 대한 단일 리스트 -->
	<select id="paymentFlgUpdateList" parameterType="java.util.Map" resultType="com.core.plus.contact.cust.vo.CustVO">
		SELECT A.total_price, (A.total_price - sum(payment_price)) as outstding_amount
		FROM (
			SELECT ot.oppty_no, o.oppty_name, sum((ot.qty * ot.list_price - ot.dc_price)) as total_price
			FROM tb_oppty o, tb_oppty_item ot
			WHERE o.oppty_no = ot.oppty_no
			AND o.cust_no = #{cust_no} AND o.oppty_no = #{oppty_no}
			GROUP BY o.oppty_name
		) A left outer join tb_sales B on A.oppty_no = B.oppty_no
		GROUP BY A.oppty_no
	</select>
	
	<!-- 현재 납부한 목록 -->
	<select id="salesList" parameterType="java.util.Map" resultType="com.core.plus.contact.cust.vo.CustVO">
		SELECT *
		FROM tb_sales
		WHERE
			oppty_no = #{oppty_no} AND cust_no = #{cust_no}
	</select>
	
	<!-- 납부 상품 등록 -->
	<insert id="paymentInsert" parameterType="com.core.plus.contact.cust.vo.CustVO">
		INSERT INTO tb_sales (oppty_no,  cust_no, payment_price)
		VALUES (#{oppty_no}, #{cust_no}, #{payment_price})
	</insert>
	
	<!-- 납부 이력 -->
	<insert id="paymentRecordInsert" parameterType="com.core.plus.contact.cust.vo.CustVO">
		<selectKey keyProperty="sales_no" resultType="String" order="BEFORE">
			SELECT 
                  IF(SUBSTR(MAX(sales_no), 1, 10) = DATE_FORMAT(now(), '%Y%m%d%H')
                     , MAX(sales_no)+1
                     , concat(DATE_FORMAT(now(), '%Y%m%d%H'),'00001')) sales_no
                  FROM tb_sales_record USE INDEX(PRIMARY)
		</selectKey>
		INSERT INTO tb_sales_record (oppty_no, sales_no, cust_no, payment_price)
		VALUES (#{oppty_no}, #{sales_no}, #{cust_no}, #{payment_price})
	</insert>
	
	<update id="paymentUpdate" parameterType="com.core.plus.contact.cust.vo.CustVO">
		UPDATE 
			tb_sales
		SET
			payment_price = payment_price + #{payment_price}
		WHERE
			oppty_no = #{oppty_no} AND cust_no = #{cust_no}
	</update>
	
	<update id="paymentFlgUpdate" parameterType="com.core.plus.contact.cust.vo.CustVO">
		UPDATE 
			tb_sales
		SET
			payment_flg = #{payment_flg}
		WHERE
			oppty_no = #{oppty_no} AND cust_no = #{cust_no}
	</update>
	
</mapper>